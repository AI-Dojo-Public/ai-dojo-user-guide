---
- name: Install Docker
  tags: docker
  hosts: all
  become: yes
  tasks:
    - name: Check if OS is Debian or Ubuntu
      set_fact:
        os: "{{ ansible_facts['distribution'] | lower }}"
      when: ansible_facts['distribution'] in ['Debian', 'Ubuntu']

    - name: Detected OS
      debug:
        msg: "OS detected: {{ os }}"

    - name: Install ca-certificates and curl
      apt:
        name:
          - ca-certificates
          - curl
        state: present
        update_cache: yes

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/{{ os }}/gpg
        dest: /etc/apt/keyrings/docker.asc

    - name: Set permissions for Docker GPG key
      file:
        path: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Determine system architecture
      command: "dpkg --print-architecture"
      register: architecture

    - name: Include OS release information
      shell: "cat /etc/os-release"
      register: os_release_raw

    - name: Generate Docker repository entry
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ os }} $(grep VERSION_CODENAME /etc/os-release | cut -d= -f2) stable" > /etc/apt/sources.list.d/docker.list
      when: os_release_raw.stdout is defined

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Set up MTU for Docker
      copy:
        content: |
          {
            "mtu": 1442
          }
        dest: /etc/docker/daemon.json

    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted
        daemon_reload: true

- name: Prepare ai-dojo demo
  tags: ai-dojo-demo
  hosts: all
  become: no
  tasks:
    - name: git clone ai-dojo
      git:
        repo: "https://oauth2:{{ dojo_token }}@gitlab.ics.muni.cz/ai-dojo/ai-dojo.git"
        dest: "/home/{{ ansible_user }}/ai-dojo"
        version: master

    - name: git clone cyst-core
      git:
        repo: "https://oauth2:{{ cyst_core_token }}@gitlab.ics.muni.cz/cyst/cyst-core.git"
        dest: "/home/{{ ansible_user }}/ai-dojo/cyst-core"
        depth: 1
        version: v0.6.0a0

    - name: git clone cyst-platform-docker-cryton
      git:
        repo: "https://oauth2:{{ cyst_platform_token }}@gitlab.ics.muni.cz/cyst/cyst-platform-docker-cryton.git"
        dest: "/home/{{ ansible_user }}/ai-dojo/cyst-platform-docker-cryton"
        depth: 1
        version: v0.1.1

    - name: git clone cyst-models-dojo-cryton
      git:
        repo: "https://oauth2:{{ cyst_models_token }}@gitlab.ics.muni.cz/cyst/cyst-models-dojo-cryton.git"
        dest: "/home/{{ ansible_user }}/ai-dojo/cyst-models-dojo-cryton"
        depth: 1
        version: v0.1.0

    - name: deploy Cryton and Dr Emu
      become: yes
      community.docker.docker_compose_v2:
        project_src: "/home/{{ ansible_user }}/ai-dojo/demo-2023"
        state: present
        build: always

- name: Prepare CYST
  tags: ai-dojo-demo
  hosts: all
  become: no
  tasks:
    - name: install Python 3.11
      become: yes
      apt:
        name: python3.11
        state: present
        update_cache: yes

    - name: install venv package
      become: yes
      apt:
        name: python3.11-venv
        state: present
        update_cache: yes

    - name: create python venv
      command:
        cmd: python3.11 -m venv /home/{{ ansible_user }}/ai-dojo/cyst-models-dojo-cryton/venv
      args:
        creates: /home/{{ ansible_user }}/ai-dojo/cyst-models-dojo-cryton/venv

    - name: install cyst-core package
      command:
        cmd: /home/{{ ansible_user }}/ai-dojo/cyst-models-dojo-cryton/venv/bin/pip install /home/{{ ansible_user }}/ai-dojo/cyst-core

    - name: install cyst-platform-docker-cryton package
      command:
        cmd: /home/{{ ansible_user }}/ai-dojo/cyst-models-dojo-cryton/venv/bin/pip install /home/{{ ansible_user }}/ai-dojo/cyst-platform-docker-cryton

    - name: install cyst-models-dojo-cryton package
      command:
        cmd: /home/{{ ansible_user }}/ai-dojo/cyst-models-dojo-cryton/venv/bin/pip install /home/{{ ansible_user }}/ai-dojo/cyst-models-dojo-cryton
